
package fourpetals.com.controller.shipper;

import java.util.*;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import fourpetals.com.entity.Order;
import fourpetals.com.entity.User;
import fourpetals.com.enums.OrderStatus;
import fourpetals.com.repository.OrderRepository;
import fourpetals.com.security.CustomUserDetails;
import fourpetals.com.service.UserService;

@Controller
@RequestMapping("/shipper")
public class ShipperProcessController {

	@Autowired
	private OrderRepository orderRepository;
	@Autowired
	private UserService userService;

	// HI·ªÇN TH·ªä DANH S√ÅCH ƒê∆†N H√ÄNG ƒêANG X·ª¨ L√ù
	@GetMapping("/process")
	public String hienThiDanhSachDonHangDangXuLy(@AuthenticationPrincipal CustomUserDetails userDetails, Model model) {
	    
	    Integer maNVDangNhap = null; // Bi·∫øn l∆∞u M√£ NV
	    
	    if (userDetails != null) {
	        Optional<User> userOpt = userService.findByUsername(userDetails.getUsername());
	        
	        if (userOpt.isPresent()) {
	            User user = userOpt.get();
	            model.addAttribute("user", user);
	            
	            // L·∫•y MaNV t·ª´ ƒë·ªëi t∆∞·ª£ng User ƒëang ƒëƒÉng nh·∫≠p (ƒêi·ªÅu ch·ªânh theo c·∫•u tr√∫c Entity c·ªßa b·∫°n)
	            if (user.getNhanVien() != null) {
	                // V√≠ d·ª•: user.getEmployee() tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Employee, v√† getMaNV() l·∫•y M√£ NV
	                maNVDangNhap = user.getNhanVien().getMaNV(); 
	            }
	        }
	    }

	    List<Order> listOrders = List.of(); 
	    
	    if (maNVDangNhap != null) {
	        // üí° S·ª¨A ƒê·ªîI: G·ªçi ph∆∞∆°ng th·ª©c m·ªõi, ch·ªâ l·ªçc theo MaNV
	        listOrders = orderRepository.findAllOrdersByShipperMaNV(maNVDangNhap); 
	    }

	    model.addAttribute("listOrders", listOrders);
	    return "shipper/process";
	}

	// ---------------------------------------------------------------------------------
	// XEM CHI TI·∫æT ƒê∆†N H√ÄNG (ƒê√É B·ªî SUNG)
	// ---------------------------------------------------------------------------------
	@Transactional
	@GetMapping("/{maDH}/details")
	@ResponseBody
	public Map<String, Object> getOrderDetails(@PathVariable("maDH") Integer maDH) {
		Map<String, Object> result = new HashMap<>();

		Order donHang = orderRepository.findById(maDH).orElse(null);
		if (donHang == null) {
			result.put("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
			return result;
		}

		// L·∫•y th√¥ng tin chi ti·∫øt
		String tenKhachHang = donHang.getKhachHang() != null ? donHang.getKhachHang().getHoTen() : "Kh√¥ng c√≥";
		String diaChi = donHang.getDiaChiGiao() != null ? donHang.getDiaChiGiao() : "Kh√¥ng c√≥";
		String soDienThoai = donHang.getSdtNguoiNhan() != null ? donHang.getSdtNguoiNhan() : "Kh√¥ng c√≥";
		String thanhTien = donHang.getTongTien() != null ? donHang.getTongTien().toPlainString() : "0";

		String phuongThucThanhToan = donHang.getPhuongThucThanhToan() != null
				? donHang.getPhuongThucThanhToan().toString()
				: "Ch∆∞a x√°c ƒë·ªãnh";

		// X·ª≠ l√Ω danh s√°ch s·∫£n ph·∫©m
		String sanPham = donHang.getChiTietDonHang().stream()
				.map(ct -> ct.getSanPham().getTenSP() + " (x" + ct.getSoLuong() + ")")
				.collect(Collectors.joining(", "));

		// ƒê·∫∑t k·∫øt qu·∫£ v√†o Map ƒë·ªÉ tr·∫£ v·ªÅ JSON
		result.put("tenKhachHang", tenKhachHang);
		result.put("diaChi", diaChi);
		result.put("soDienThoai", soDienThoai);
		result.put("sanPham", sanPham);
		result.put("thanhTien", thanhTien);
		result.put("phuongThucThanhToan", phuongThucThanhToan);

		return result;
	}
	
	@Transactional
	@PostMapping("/updateOrders")
	public String capNhatTatCaDonHang(@RequestParam Map<String, String> paramMap,
	        RedirectAttributes redirectAttributes) {

	    List<String> thongBaoLoi = new ArrayList<>();
	    
	    // S·ª≠ d·ª•ng bi·∫øn boolean ƒë·ªÉ ki·ªÉm tra xem c√≥ b·∫•t k·ª≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng kh√¥ng
	    boolean coDonHangDuocCapNhat = false; 

	    for (String key : paramMap.keySet()) {
	        if (key.startsWith("status-")) {
	            try {
	                String maDHStr = key.replace("status-", "");
	                Integer maDH = Integer.valueOf(maDHStr);

	                String trangThaiMoiStr = paramMap.get(key);
	                String lyDo = paramMap.get("note-" + maDHStr);

	                OrderStatus trangThaiMoi = OrderStatus.valueOf(trangThaiMoiStr.toUpperCase());

	                // 1. KH√îI PH·ª§C LOGIC KI·ªÇM TRA B·∫ÆT BU·ªòC NH·∫¨P T·∫†I SERVER
	                if (OrderStatus.HUY.equals(trangThaiMoi) && (lyDo == null || lyDo.trim().isEmpty())) {
	                    // N·∫øu l·ªói: KH√îNG L∆ØU v√† TH√äM TH√îNG B√ÅO L·ªñI V√ÄO DANH S√ÅCH
	                    thongBaoLoi.add("‚ùå ƒê∆°n h√†ng " + maDH + " th·∫•t b·∫°i nh∆∞ng ch∆∞a c√≥ ghi ch√∫.");
	                } else {
	                    // N·∫øu h·ª£p l·ªá: TH·ª∞C HI·ªÜN L∆ØU
	                    Optional<Order> orderOpt = orderRepository.findById(maDH);

	                    if (orderOpt.isPresent()) {
	                        Order order = orderOpt.get();
	                        order.setTrangThai(trangThaiMoi);
	                        order.setLyDo(lyDo);
	                        orderRepository.save(order);
	                        coDonHangDuocCapNhat = true; // ƒê√°nh d·∫•u l√† c√≥ c·∫≠p nh·∫≠t
	                        // ‚ùå KH√îNG TH√äM TH√îNG B√ÅO TH√ÄNH C√îNG C·ª§ TH·ªÇ V√ÄO LIST
	                    } else {
	                        thongBaoLoi.add("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c√≥ m√£ " + maDH + " ƒë·ªÉ c·∫≠p nh·∫≠t.");
	                    }
	                }
	                
	            } catch (Exception e) {
	                thongBaoLoi.add("‚ùå L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng.");
	                e.printStackTrace();
	            }
	        }
	    }
	    
	    // 2. CH·ªà HI·ªÇN TH·ªä TH√îNG B√ÅO CHUNG SAU KHI V√íNG L·∫∂P K·∫æT TH√öC
	    if (coDonHangDuocCapNhat && thongBaoLoi.isEmpty()) {
	        redirectAttributes.addFlashAttribute("successMessages", List.of("‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng c√°c thay ƒë·ªïi."));
	    } else if (coDonHangDuocCapNhat && !thongBaoLoi.isEmpty()) {
	        redirectAttributes.addFlashAttribute("successMessages", List.of("‚úÖ M·ªôt s·ªë ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t."));
	    }

	    if (!thongBaoLoi.isEmpty()) {
	        // Ch·ªâ hi·ªÉn th·ªã l·ªói cho c√°c ƒë∆°n h√†ng vi ph·∫°m
	        redirectAttributes.addFlashAttribute("errorMessages", thongBaoLoi);
	    }

	    return "redirect:/shipper/process";
	}
}