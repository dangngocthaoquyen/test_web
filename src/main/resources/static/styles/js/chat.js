console.log('Chat JS loaded (Combined Version - Patched)');

document.addEventListener('DOMContentLoaded', () => {

    // --- 1. L·∫•y T·∫§T C·∫¢ c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt ---
    const chatButton = document.getElementById('chatButton');
    const chatContainer = document.getElementById('chatContainer');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');

    // L·∫•y c√°c th·∫ª meta m·ªôt c√°ch an to√†n
    const metaSession = document.querySelector('meta[name="session-id"]');
    const metaRoom = document.querySelector('meta[name="room-id"]');
    
    // ‚úÖ S·ª¨A L·ªñI 1: Th√™m th·∫ª meta cho user-id
    const metaUserId = document.querySelector('meta[name="user-id"]');

    // --- 2. Ki·ªÉm tra l·ªói nghi√™m tr·ªçng (Thi·∫øu DOM) ---
    if (!chatButton || !chatContainer || !chatMessages || !chatInput || !sendButton) {
        console.error('L·ªñI NGHI√äM TR·ªåNG: Thi·∫øu m·ªôt trong c√°c ph·∫ßn t·ª≠ chat c∆° b·∫£n. Script d·ª´ng l·∫°i.');
        return; // D·ª´ng script ngay l·∫≠p t·ª©c
    }

    // --- 3. L·∫•y th√¥ng tin (An to√†n) ---
    const sessionId = (metaSession && metaSession.content) ? metaSession.content : null;
    const roomId = (metaRoom && metaRoom.content) ? metaRoom.content : null;
    
    // ‚úÖ S·ª¨A L·ªñI 1: ƒê·ªçc UserID t·ª´ meta.
    // N·∫øu th·∫ª meta t·ªìn t·∫°i V√Ä c√≥ n·ªôi dung (kh√¥ng ph·∫£i chu·ªói r·ªóng ''),
    // th√¨ chuy·ªÉn n√≥ th√†nh s·ªë. Ng∆∞·ª£c l·∫°i, n√≥ l√† null (Guest).
    const currentUserId = (metaUserId && metaUserId.content) ? parseInt(metaUserId.content) : null;

    console.log("üì° sessionId:", sessionId, "roomId:", roomId, "currentUserId:", currentUserId);

    const isInternalChat = false;
    const receiverId = 1; // Nh√¢n vi√™n ph·ª• tr√°ch (Gi·∫£ ƒë·ªãnh ID = 1)
    window.stompClient = null;

    // --- 4. ƒê·ªãnh nghƒ©a t·∫•t c·∫£ c√°c h√†m ---

    /**
     * Th√™m tin nh·∫Øn v√†o giao di·ªán
     */
    function addMessage(text, isUser = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message flex ${isUser ? 'user justify-end' : 'bot'}`;
        messageDiv.innerHTML = `
            ${!isUser ? '<div class="message-avatar">üå∏</div>' : ''}
            <div><div class="message-content">${text}</div></div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    /**
     * L·∫•y ph·∫£n h·ªìi t·ª± ƒë·ªông (fallback)
     */
    function getBotResponse(message) {
        const msg = message.toLowerCase();
        if (msg.includes('mua') || msg.includes('hoa')) return 'Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i hoa t∆∞∆°i, b·∫°n th√≠ch lo·∫°i n√†o?';
        if (msg.includes('ƒë·∫∑t')) return 'B·∫°n c√≥ th·ªÉ ƒë·∫∑t hoa online v√† ch·ªçn ng√†y giao h√†ng.';
        if (msg.includes('s·ª± ki·ªán')) return 'Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• trang tr√≠ hoa cho s·ª± ki·ªán.';
        return 'C·∫£m ∆°n b·∫°n! T∆∞ v·∫•n vi√™n s·∫Ω li√™n h·ªá s·ªõm.';
    }

    /**
     * H√†m ch√≠nh ƒë·ªÉ g·ª≠i tin nh·∫Øn
     */
    function sendMessage() {
        const text = chatInput.value.trim();
        if (!text) return;

        addMessage(text, true);
        chatInput.value = '';

        if (window.stompClient && window.stompClient.connected) {
            
            // ‚úÖ S·ª¨A L·ªñI 2:
            // Ch·ªâ c·∫ßn ki·ªÉm tra roomId. 
            // Guest s·∫Ω c√≥ (currentUserId=null, C√ì sessionId).
            // Customer s·∫Ω c√≥ (C√ì currentUserId, sessionId=null).
            // Logic check m·ªõi: "Ph√≤ng c√≥ t·ªìn t·∫°i KH√îNG?" V√Ä 
            // "N·∫øu l√† Guest, th√¨ sessionId c≈©ng ph·∫£i t·ªìn t·∫°i?"
            if (!roomId || (currentUserId === null && !sessionId)) {
                console.error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn WS: thi·∫øu roomId, ho·∫∑c l√† Guest nh∆∞ng thi·∫øu sessionId.');
                addMessage('L·ªói k·∫øt n·ªëi. Vui l√≤ng t·∫£i l·∫°i trang.', false);
                return;
            }

            const payload = {
                noiDung: text,
                nguoiGuiId: currentUserId, // S·∫Ω l√† null n·∫øu l√† Guest
                nguoiNhanId: receiverId,
                sessionId: sessionId, // S·∫Ω l√† null n·∫øu l√† Customer
                noiBo: isInternalChat,
                roomId: roomId
            };
            window.stompClient.send("/app/send", {}, JSON.stringify(payload));
        
        } else {
            // FALLBACK BOT
            console.log('Kh√¥ng c√≥ k·∫øt n·ªëi WebSocket, s·ª≠ d·ª•ng bot fallback.');
            setTimeout(() => addMessage(getBotResponse(text), false), 800 + Math.random() * 500);
        }
        
        chatInput.focus();
    }

    // --- 5. Kh·ªüi t·∫°o WebSocket ---

    function initWebSocket() {
        if (typeof SockJS === 'undefined' || typeof Stomp === 'undefined') {
            console.warn('SockJS/Stomp ch∆∞a ƒë∆∞·ª£c t·∫£i. Chat s·∫Ω ·ªü ch·∫ø ƒë·ªô offline (bot fallback).');
            return;
        }

        // ‚úÖ S·ª¨A L·ªñI 2 (T∆∞∆°ng t·ª± nh∆∞ sendMessage):
        // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt ƒë·ªÉ K·∫æT N·ªêI V√Ä SUBSCRIBE
        if (!roomId) {
            console.warn('Kh√¥ng th·ªÉ kh·ªüi t·∫°o WebSocket: Thi·∫øu roomId.');
            return;
        }
        
        // N·∫øu l√† guest nh∆∞ng l·∫°i thi·∫øu sessionId th√¨ c≈©ng kh√¥ng subscribe ƒë∆∞·ª£c
        if (roomId.startsWith('guest-') && !sessionId) {
            console.warn('Kh√¥ng th·ªÉ kh·ªüi t·∫°o WebSocket: Guest nh∆∞ng thi·∫øu sessionId.');
            return;
        }

        // N·∫øu l√† customer nh∆∞ng (v√¨ l·ªói n√†o ƒë√≥) l·∫°i thi·∫øu userId th√¨ c≈©ng kh√¥ng subscribe ƒë∆∞·ª£c
        if (roomId.startsWith('customer-') && currentUserId === null) {
            console.warn('Kh√¥ng th·ªÉ kh·ªüi t·∫°o WebSocket: Customer nh∆∞ng thi·∫øu currentUserId.');
            return;
        }


        try {
            const socket = new SockJS('/ws-chat');
            const stompClient = Stomp.over(socket);
            window.stompClient = stompClient;

            stompClient.connect({}, frame => {
                console.log('Connected:', frame);
                if (roomId.startsWith('guest-')) {
                    subscribeGuestMessages();
                } else if (roomId.startsWith('customer-')) {
                    subscribeCustomerMessages();
                }
            }, error => {
                console.error('STOMP connection error:', error);
                window.stompClient = null;
            });

        } catch (e) {
            console.error('L·ªói kh·ªüi t·∫°o WebSocket:', e);
            window.stompClient = null;
        }
    }

    function subscribeGuestMessages() {
        // Ph·∫£i ch·∫Øc ch·∫Øn sessionId c√≥ t·ªìn t·∫°i (ƒë√£ check ·ªü initWebSocket)
        const topic = "/topic/chat-guest-" + sessionId;
        window.stompClient.subscribe(topic, message => {
            const msg = JSON.parse(message.body);
            if (msg.sessionId === sessionId) {
                addMessage(msg.noiDung, false);
            }
        });
        console.log('Subscribed to guest messages:', topic);
    }

    function subscribeCustomerMessages() {
        // Ph·∫£i ch·∫Øc ch·∫Øn currentUserId c√≥ t·ªìn t·∫°i (ƒë√£ check ·ªü initWebSocket)
        const topic = "/topic/chat-user-" + currentUserId;
        window.stompClient.subscribe(topic, message => {
            const msg = JSON.parse(message.body);
            // Ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn kh√¥ng ph·∫£i c·ªßa ch√≠nh m√¨nh
            if (msg.nguoiGuiId !== currentUserId) {
                addMessage(msg.noiDung, false);
            }
        });
        console.log('Subscribed to customer messages:', topic);
    }

    // --- 6. G√°n s·ª± ki·ªán (Kh√¥ng thay ƒë·ªïi) ---

    chatButton.addEventListener('click', () => {
        chatButton.classList.toggle('active');
        chatContainer.classList.toggle('active');
        if (chatContainer.classList.contains('active')) chatInput.focus();
    });

    sendButton.addEventListener('click', sendMessage);
    
    chatInput.addEventListener('keypress', e => {
        if (e.key === 'Enter') {
            e.preventDefault(); 
            sendMessage();
        }
    });

    document.querySelectorAll('.quick-reply-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const messageText = btn.getAttribute('data-message');
            chatInput.value = messageText;
            sendMessage();
        });
    });

    // --- 7. Kh·ªüi ch·∫°y ---
    initWebSocket();

});