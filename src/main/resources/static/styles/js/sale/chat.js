console.log('Employee Chat JS loaded');

document.addEventListener('DOMContentLoaded', () => {
    const chatRoomsList = document.getElementById('chatRooms');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendButton = document.getElementById('sendButton');
    const chatHeader = document.getElementById('chatHeader');

    const metaUserId = document.querySelector('meta[name="user-id"]');
    const currentUserId = metaUserId?.content ? parseInt(metaUserId.content) : null;

    let activeRoomId = null;
    let currentReceiverId = null;
    window.stompClient = null;
    const subscribedRooms = new Set(); // L∆∞u c√°c room ƒë√£ subscribe

    // --- Hi·ªÉn th·ªã tin nh·∫Øn ---
    function addMessage(text, senderName = 'Guest', isUser = false) {
        const msgDiv = document.createElement('div');
        msgDiv.className = `message ${isUser ? 'user justify-end' : 'bot'}`;
        msgDiv.innerHTML = `
            ${!isUser ? `<div class="message-avatar">${senderName[0].toUpperCase()}</div>` : ''}
            <div><div class="message-content">${text}</div></div>
        `;
        chatMessages.appendChild(msgDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // --- Load l·ªãch s·ª≠ tin nh·∫Øn ---
    function loadMessages(roomId) {
        fetch(`/api/chat/room/${roomId}`)
            .then(res => res.json())
            .then(data => {
                chatMessages.innerHTML = '';
                data.forEach(msg => {
                    const isUser = msg.nguoiGuiId === currentUserId;
                    const senderName = isUser ? 'B·∫°n' : msg.nguoiGuiUsername || 'Guest';
                    addMessage(msg.noiDung, senderName, isUser);
                });
            })
            .catch(err => {
                console.error('L·ªói load messages:', err);
                chatMessages.innerHTML = '<div class="text-center text-gray">Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn</div>';
            });
    }

    // --- Th√™m ph√≤ng m·ªõi ---
    function addRoom(roomId, roomName) {
        if (!document.querySelector(`.chat-room[data-room-id="${roomId}"]`)) {
            const li = document.createElement('li');
            li.className = 'chat-room';
            li.dataset.roomId = roomId;
            li.textContent = roomName;
            chatRoomsList.appendChild(li);

            li.addEventListener('click', () => {
                selectRoom(roomId, roomName);
            });
        }
    }

    // --- Ch·ªçn ph√≤ng chat ---
    function selectRoom(roomId, roomName) {
        activeRoomId = roomId;
        chatHeader.textContent = roomName;
        chatMessages.innerHTML = '<div class="text-center text-gray">ƒêang t·∫£i tin nh·∫Øn...</div>';

        currentReceiverId = roomId.startsWith('customer-') ? parseInt(roomId.split('-')[1]) : null;

        // Subscribe topic ph√≤ng n·∫øu ch∆∞a subscribe
        if (!subscribedRooms.has(roomId)) {
            subscribeRoom(roomId);
        }

        loadMessages(roomId);
    }

    // --- Subscribe topic cho ph√≤ng ---
    function subscribeRoom(roomId) {
        if (!window.stompClient || !roomId) return;

        let topic = '';
        if (roomId.startsWith('guest-')) {
            topic = `/topic/chat-${roomId}`;
        } else if (roomId.startsWith('customer-')) {
            topic = `/topic/chat-user-${currentReceiverId}`;
        }

        window.stompClient.subscribe(topic, message => {
            const msg = JSON.parse(message.body);

            // N·∫øu l√† guest m·ªõi, t·ª± t·∫°o room
            if (roomId.startsWith('guest-') && !document.querySelector(`.chat-room[data-room-id="${roomId}"]`)) {
                addRoom(roomId, `Guest üå∏ ${roomId.split('-')[1]}`);
            }

            const isUser = msg.nguoiGuiId === currentUserId;
            const senderName = isUser ? 'B·∫°n' : msg.nguoiGuiUsername || 'Guest';

            // Hi·ªÉn th·ªã n·∫øu l√† room ƒëang ch·ªçn
            if (activeRoomId === roomId) {
                addMessage(msg.noiDung, senderName, isUser);
            }
        });

        subscribedRooms.add(roomId);
        console.log('Subscribed to room:', topic);
    }

    // --- G·ª≠i tin nh·∫Øn ---
    function sendMessage() {
        if (!activeRoomId || !chatInput.value.trim()) return;

        const payload = {
            noiDung: chatInput.value.trim(),
            nguoiGuiId: currentUserId,
            nguoiNhanId: currentReceiverId,
            sessionId: activeRoomId.startsWith('guest-') ? activeRoomId.split('-')[1] : null,
            roomId: activeRoomId,
            noiBo: true
        };

        if (window.stompClient && window.stompClient.connected) {
            window.stompClient.send('/app/send', {}, JSON.stringify(payload));
            addMessage(chatInput.value.trim(), 'B·∫°n', true);
            chatInput.value = '';
        } else {
            console.warn('Ch∆∞a k·∫øt n·ªëi WebSocket');
        }
    }

    sendButton.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', e => {
        if (e.key === 'Enter') {
            e.preventDefault();
            sendMessage();
        }
    });

    // --- Kh·ªüi t·∫°o WebSocket ---
    function initWebSocket() {
        if (!currentUserId) {
            console.warn('Thi·∫øu currentUserId cho nh√¢n vi√™n.');
            return;
        }

        const socket = new SockJS('/ws-chat');
        const stompClient = Stomp.over(socket);
        window.stompClient = stompClient;

        stompClient.connect({}, frame => {
            console.log('STOMP Connected:', frame);

            // Khi guest m·ªõi nh·∫Øn, t·∫°o room t·ª± ƒë·ªông
            stompClient.subscribe(`/topic/chat-new-guest`, message => {
                const msg = JSON.parse(message.body);
                const roomId = `guest-${msg.sessionId}`;
                const roomName = `Guest üå∏ ${msg.sessionId}`;
                addRoom(roomId, roomName);
                subscribeRoom(roomId); // Subscribe ngay khi room m·ªõi
            });

            // Subscribe t·∫•t c·∫£ tin nh·∫Øn employee ri√™ng
            stompClient.subscribe(`/topic/chat-user-${currentUserId}`, message => {
                const msg = JSON.parse(message.body);
                const roomId = `customer-${msg.nguoiGuiId}`;
                const roomName = `Customer üíê ${msg.nguoiGuiUsername || msg.nguoiGuiId}`;
                addRoom(roomId, roomName);
                subscribeRoom(roomId);

                // N·∫øu ƒëang ch·ªçn room n√†y, hi·ªÉn th·ªã tin nh·∫Øn
                if (activeRoomId === roomId) {
                    addMessage(msg.noiDung, msg.nguoiGuiUsername || 'Customer', false);
                }
            });

        }, error => {
            console.error('STOMP connection error:', error);
        });
    }

    initWebSocket();
});
